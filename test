// README.md

# Nansen Liquidity Tool Project

This project consists of a Backend and Frontend to display token inflows and outflows in real-time using SSE and React.

---

## 1. Push the Project to GitHub

1. Create a new repository on GitHub, for example: `nansen-liquidity-tool`.
2. Open your terminal in the local project folder:

```bash
# Initialize Git
 git init

# Add all files
git add .

# First commit
git commit -m "Initial commit"

# Link to your GitHub repository
git remote add origin https://github.com/<username>/nansen-liquidity-tool.git

# Push the files
git branch -M main
git push -u origin main
```

> Replace `<username>` with your GitHub username.

---

## 2. Set Up Render to Deploy the Site (Simplified)

Because Render cannot use a path like `/frontend / backend`, we need to deploy the backend and frontend separately or adjust the folder structure.

### Option 1: Deploy backend only and serve frontend statically
- Move the contents of the `frontend/dist` folder into the `backend/public` folder.
- Adjust `server.js` to serve `public` as static files.
- Then, in Render:
  - Root Directory: `backend`
  - Build Command:
```bash
npm install
```
  - Start Command:
```bash
node server.js
```

### Option 2: Use a monorepo deploy
- Keep `frontend` and `backend` separate, but set Root Directory to `/` (project root).
- In Build Command:
```bash
# Install frontend dependencies and build
cd frontend && npm install && npm run build

# Move build output to backend/public
cp -r dist ../backend/public

# Install backend dependencies
cd ../backend && npm install
```
- Start Command:
```bash
cd backend && node server.js
```

> Make sure Node version is 20 or compatible.

This avoids errors about missing package.json and missing directories.

---

## 3. Run the Project Locally

### Backend:
```bash
cd backend
npm install
node server.js
```

### Frontend (for development):
```bash
cd frontend
npm install
npm run dev
```
Open your browser at:
```
http://localhost:3000
```

---

## 4. Notes
- The current API is a placeholder and should be replaced with the real Nansen API endpoint.
- `fetchTokenFlows` can be modified to handle real JSON data from Nansen.
- SSE is used to automatically update the UI in real-time.

---

This README now includes deployment options that avoid the Render Root Directory errors.
