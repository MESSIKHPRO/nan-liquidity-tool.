// README.md

# Nansen Liquidity Tool Project

This project consists of a Backend and Frontend to display token inflows and outflows in real-time using SSE and React.

---

## 1. Push the Project to GitHub

1. Create a new repository on GitHub, for example: `nansen-liquidity-tool`.
2. Open your terminal in the local project folder:

```bash
# Initialize Git
 git init

# Add all files
git add .

# First commit
git commit -m "Initial commit"

# Link to your GitHub repository
git remote add origin https://github.com/<username>/nansen-liquidity-tool.git

# Push the files
git branch -M main
git push -u origin main
```

> Replace `<username>` with your GitHub username.

---

## 2. Set Up Render to Deploy the Site (Corrected Root Directory)

1. Sign up at [Render](https://render.com) and choose **New Web Service**.
2. Connect your GitHub account and select the repository you created.
3. Choose the `main` branch.
4. Set **Root Directory** to `/` (the project root that contains both `frontend` and `backend`). Do **not** set it to `/backend` because the package.json is in the root or inside each folder separately.
5. Set **Build Command**:

```bash
# Install frontend dependencies and build frontend
cd frontend && npm install && npm run build

# Install backend dependencies
cd backend && npm install
```

6. Set **Start Command**:

```bash
cd backend && node server.js
```

7. Click **Create Web Service**.
8. After a few minutes, Render will provide a direct link to test the site, such as:
```
https://your-service-name.onrender.com
```

> Ensure your Node version on Render matches your project (Node 20 recommended). Also, make sure both `frontend/package.json` and `backend/package.json` exist.

---

## 3. Run the Project Locally

### Backend:
```bash
cd backend
npm install
node server.js
```

### Frontend:
```bash
cd frontend
npm install
npm run dev
```
Open your browser at:
```
http://localhost:3000
```

---

## 4. Notes
- The current API is a placeholder and should be replaced with the real Nansen API endpoint.
- You can modify `fetchTokenFlows` to handle actual JSON data from Nansen.
- SSE is used to automatically update the UI in real-time.

---

This README now ensures the correct Root Directory and package.json locations for successful deployment on Render.

